[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/taskPlanner.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"taskPlanner package offers comprehensive solution effective task management, designed streamline daily workflow enhance productivity. robust system organizing -lists, taskPlanner provides tools adding, removing, updating items effortlessly. Whether ’re busy professional, student juggling multiple assignments, anyone seeking better organization daily life, taskPlanner equips functionality needed stay top tasks ease. Explore key features functionalities taskPlanner demonstrate can leverage tools optimize task management process. filtering tasks date priority real-time task tracking, taskPlanner go-solution efficient task planning execution.","code":""},{"path":"/articles/taskPlanner.html","id":"installation-getting-started","dir":"Articles","previous_headings":"","what":"Installation & Getting Started","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"can install taskPlanner package GitHub using devtools package:","code":"devtools::install_github(\"Advanced-R-Programming/assignment-3-package-completion-agoh0008\") library(taskPlanner)"},{"path":"/articles/taskPlanner.html","id":"import-current-to-do-list","dir":"Articles","previous_headings":"","what":"Import Current To-Do List","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"load recent -list, can run following command: first checks existence -list file within inst directory taskPlanner package. file todo_list.csv exists, read R data frame.  -list file exist, empty data frame created appropriate column headers (“task”, “priority”, “due”). ensures always valid data structure work , even haven’t yet created -list file accidentally deleted.","code":"list <- import_todo_list()"},{"path":"/articles/taskPlanner.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"following functions provide users capability efficiently handle tasks, including adding, updating, removing , along ability create S3 objects perform real-time task tracking. Furthermore, features task filtering date priority, well sorting options, provide users flexibility needed tailor task management approach specific needs preferences.","code":""},{"path":"/articles/taskPlanner.html","id":"adding-new-tasks","dir":"Articles","previous_headings":"Functions","what":"Adding New Tasks","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"add new tasks -list, call add_task function appropriate arguments: todo_list, task, priority, due. Make sure provide valid inputs: todo_list: data frame list representing current -list. task: character string specifying task added. priority: integer specifying priority task (1-5). due: Date object specifying due date task “YYYY-MM-DD” format. task successfully added, updated -list returned. similar task already exists list, warning displayed, original list returned without changes","code":"list <- add_task(list, \"Buy bread\", 3, \"2024-03-15\") list <- add_task(list, \"Do laundry\", 2, \"2024-03-16\") list <- add_task(list, \"Buy dinner\", 1, \"2025-01-09\") # Updated to-do list after adding tasks print(list)  #>             task priority        due #> 1 Do assignments        3 2024-03-15 #> 2       Buy cake        4 2024-03-16 #> 3      Buy bread        3 2024-03-15 #> 4     Do laundry        2 2024-03-16 #> 5     Buy dinner        1 2025-01-09"},{"path":"/articles/taskPlanner.html","id":"updating-tasks","dir":"Articles","previous_headings":"Functions","what":"Updating Tasks","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"update existing tasks -list, can use update_task function. example update task index 3 new values: example: 3 index task updated. list current -list data frame list. \"Buy milk\" updated task description. 2 updated priority task. \"2024-03-18\" updated due date task. Ensure provide valid inputs task index, new task description, priority, due date. executing update_task function, specified task -list updated new values.","code":"list <- update_task(3, list, \"Buy milk\", 2, \"2024-03-18\") #>             task priority        due #> 1 Do assignments        3 2024-03-15 #> 2       Buy cake        4 2024-03-16 #> 3       Buy milk        2 2024-03-18 #> 4     Do laundry        2 2024-03-16 #> 5     Buy dinner        1 2025-01-09"},{"path":"/articles/taskPlanner.html","id":"removing-tasks","dir":"Articles","previous_headings":"Functions","what":"Removing Tasks","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"remove tasks -list, can utilize remove_task function. example remove task index 1 list: parameters used : 1 index task removed. list current -list data frame list. Ensure provide valid index task want remove. executing remove_task function, specified task removed -list, list updated accordingly.","code":"list <- remove_task(1, list) print(list) #>         task priority        due #> 1   Buy cake        4 2024-03-16 #> 2   Buy milk        2 2024-03-18 #> 3 Do laundry        2 2024-03-16 #> 4 Buy dinner        1 2025-01-09"},{"path":"/articles/taskPlanner.html","id":"saving-to-do-list","dir":"Articles","previous_headings":"Functions","what":"Saving To-Do List","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"save current -list, can use export_todo_list function follows: exports updated -list back CSV file named “todo_list.csv” located inst directory package. Ensure provided todo_list argument, -list data frame list want export. next time import -list, version saved current state.","code":"export_todo_list(list)"},{"path":[]},{"path":"/articles/taskPlanner.html","id":"creating-an-s3-object","dir":"Articles","previous_headings":"S3 Object & Generic Functions","what":"Creating an S3 Object","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"create_todo_list function designed facilitate creation S3 object representing -list. accepts data frame containing tasks, priorities, due dates input. -list provided, function automatically imports current -list file. resulting object assigned class “TodoList,” making structured organized representation tasks hand. function simplifies process managing manipulating -lists within R, providing users streamlined approach organizing tasks efficiently. Creating TodoList object existing -list data frame: Creating TodoList object current -list file (imported package data):","code":"my_todo_list <- create_todo_list(list) my_todo_list <- create_todo_list()"},{"path":"/articles/taskPlanner.html","id":"printing-todolist-object","dir":"Articles","previous_headings":"S3 Object & Generic Functions","what":"Printing TodoList Object","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"print.TodoList function designed print tasks contained ‘TodoList’ object along priorities due dates. formats output tabular format columns task description, priority, due date. function particularly useful displaying contents ‘TodoList’ objects readable format. Output:","code":"print(my_todo_list) Task        Priority    Due Date ------------------------------------------------------------ Do assignments                 3    2024-03-15  Buy cake                       4    2024-03-16  Buy bread                      3    2024-03-15  Do laundry                     2    2024-03-16  Buy dinner                     1    2025-01-09"},{"path":"/articles/taskPlanner.html","id":"plotting-todolist-object","dir":"Articles","previous_headings":"S3 Object & Generic Functions","what":"Plotting TodoList Object","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"plot.TodoList function allows visualize tasks ‘TodoList’ object creating bar plot. task represented bar, height bar indicating priority level. function uses color palette distinguish different priority levels, making easier identify high-priority tasks. Output:","code":"plot(my_todo_list)"},{"path":"/articles/taskPlanner.html","id":"filter-show-items-by-date","dir":"Articles","previous_headings":"S3 Object & Generic Functions","what":"Filter & Show Items by Date","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"show_items_by_date function versatile tool filtering displaying items -list applicable classes based specified date criteria. accepts object class ‘TodoList’ object types, along date parameter format “YYYY-MM-DD” filter items. can leverage function easily identify tasks due particular date. demonstrate usage, input -list object, specify desired date, promptly receive list tasks due specific date. Output (Object ‘TodoList’ class): , tasks stored classes, can still use function providing appropriate object date filter: Output (Object ‘list’ class):","code":"show_items_by_date(my_todo_list, date = \"2024-03-16\") #> Filtered items: #>         Task Priority   Due_Date #> 1   Buy cake        4 2024-03-16 #> 2 Do laundry        2 2024-03-16 set.seed(123) other_object <- list(   task = paste(\"Task\", 1:15),   priority = sample(1:5, 15, replace = TRUE),   due = sample(seq(as.Date(\"2022-01-01\"), as.Date(\"2025-12-31\"), by = \"day\"), 15) )  show_items_by_date(other_object, date = \"2024-10-13\") #> Filtered items: #>     Task Priority   Due_Date #> 1 Task 1        3 2024-10-13"},{"path":"/articles/taskPlanner.html","id":"filter-show-items-by-priority","dir":"Articles","previous_headings":"S3 Object & Generic Functions","what":"Filter & Show Items by Priority","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"show_items_by_priority function provides convenient way filter display items -list applicable classes based specified priority filter criteria. Simply input object containing tasks specify priority level want filter , ranging 1 5. example, display tasks priority level 2 TodoList object: Output (Object ‘TodoList’ class): , tasks stored classes, can still use function providing appropriate object priority level: Output (Object ‘list’ class): function streamlines process organizing tasks based priority, helping focus task matters .","code":"show_items_by_priority(my_todo_list, priority = 2) #> Filtered items: #>         Task Priority   Due_Date #> 1   Buy milk        2 2024-03-18 #> 2 Do laundry        2 2024-03-16 set.seed(123) other_object <- list(   task = paste(\"Task\", 1:15),   priority = sample(1:5, 15, replace = TRUE),   due = sample(seq(as.Date(\"2022-01-01\"), as.Date(\"2025-12-31\"), by = \"day\"), 15) )  show_items_by_priority(other_object, priority = 2) #> Filtered items: #>     Task Priority   Due_Date #> 1 Task 3        2 2024-04-19 #> 2 Task 4        2 2022-01-26 #> 3 Task 9        2 2023-08-16"},{"path":"/articles/taskPlanner.html","id":"show-items-due-today-or-earlier","dir":"Articles","previous_headings":"S3 Object & Generic Functions","what":"Show Items due Today or Earlier","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"real-time task tracking, show_today function provides instant overview tasks due today earlier -list. allows users efficiently manage daily tasks focusing immediate priorities. Additionally, function generates bar chart illustrating priority tasks, higher priority tasks indicated taller bars. utilize feature, simply call function pass -list object argument. Output (Object ‘TodoList’ class):  tasks stored classes, can still use function passing object argument: Output (Object ‘list’ class):","code":"show_today(my_todo_list) #> Items due today or earlier: #>        Task Priority   Due_Date #>    Buy cake        4 2024-03-16 #>  Do laundry        2 2024-03-16 #>    Buy milk        2 2024-03-18 set.seed(123) other_object <- list(   task = paste(\"Task\", 1:15),   priority = sample(1:5, 15, replace = TRUE),   due = sample(seq(as.Date(\"2022-01-01\"), as.Date(\"2025-12-31\"), by = \"day\"), 15) )  show_today(other_object) #> Items due today or earlier: #>     Task Priority   Due_Date #>   Task 4        2 2022-01-26 #>   Task 7        4 2022-07-30 #>  Task 11        5 2023-01-08 #>  Task 15        4 2023-05-05 #>   Task 5        3 2023-06-03 #>  Task 14        1 2023-06-28 #>  Task 10        3 2023-07-09 #>   Task 9        2 2023-08-16 #>   Task 3        2 2024-04-19 #>  Task 12        3 2024-04-23"},{"path":"/articles/taskPlanner.html","id":"sort-items-by-date-or-priority","dir":"Articles","previous_headings":"S3 Object & Generic Functions","what":"Sort Items by Date or Priority","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"sort_items function enables users sort tasks based either due dates priority levels. accepts object class ‘TodoList’ applicable classes, along parameters specifying whether sort date priority level (date = TRUE indicating sorting date date = FALSE indicating sorting priority) well sorting order (ascending = TRUE indicating ascending order ascending = FALSE indicating descending order).","code":""},{"path":"/articles/taskPlanner.html","id":"sorting-by-date","dir":"Articles","previous_headings":"S3 Object & Generic Functions > Sort Items by Date or Priority","what":"Sorting by Date","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"sort items due dates, can use following syntax: display -list sorted date ascending order. Output Sorting Dates (Object ‘TodoList’ class):","code":"sort_items(my_todo_list, date = TRUE, ascending = TRUE) #> Sorted To-Do List by date in ascending order: #>        Task Priority   Due_Date #>  Do laundry        2 2024-03-16 #>    Buy cake        4 2024-03-16 #>    Buy milk        2 2024-03-18 #>  Buy dinner        1 2025-01-09"},{"path":"/articles/taskPlanner.html","id":"sorting-by-priority","dir":"Articles","previous_headings":"S3 Object & Generic Functions > Sort Items by Date or Priority","what":"Sorting by Priority","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"sort items priority levels, can use following syntax: display -list sorted priority descending order. Output Sorting Priority (Object ‘list’ class):","code":"set.seed(123) other_object <- list(   task = paste(\"Task\", 1:15),   priority = sample(1:5, 15, replace = TRUE),   due = sample(seq(as.Date(\"2022-01-01\"), as.Date(\"2025-12-31\"), by = \"day\"), 15) ) sort_items(other_object, date = FALSE, ascending = FALSE) #> Sorted To-Do List by priority in descending order: #>     Task Priority   Due_Date #>   Task 6        5 2025-12-20 #>  Task 11        5 2023-01-08 #>   Task 7        4 2022-07-30 #>  Task 15        4 2023-05-05 #>   Task 1        3 2024-10-13 #>   Task 2        3 2025-10-10 #>   Task 5        3 2023-06-03 #>  Task 10        3 2023-07-09 #>  Task 12        3 2024-04-23 #>  Task 13        3 2025-03-12 #>   Task 3        2 2024-04-19 #>   Task 4        2 2022-01-26 #>   Task 9        2 2023-08-16 #>   Task 8        1 2024-07-20 #>  Task 14        1 2023-06-28"},{"path":"/articles/taskPlanner.html","id":"license","dir":"Articles","previous_headings":"","what":"License","title":"taskPlanner: Effortlessly Manage Your To-Do List","text":"package licensed GPL License. See LICENSE file details.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexandra Goh. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Goh (2024). taskPlanner: Efficient Task Management -List Organization. R package version 0.0.1.","code":"@Manual{,   title = {taskPlanner: Efficient Task Management and To-Do List Organization},   author = {Alexandra Goh},   year = {2024},   note = {R package version 0.0.1}, }"},{"path":"/index.html","id":"taskplanner","dir":"","previous_headings":"","what":"Efficient Task Management and To-Do List Organization","title":"Efficient Task Management and To-Do List Organization","text":"taskPlanner package aims facilitate task management offering robust system organizing -lists. tools adding, removing, updating items, filtering tasks date priority, well real-time task tracking, users can leverage features optimize workflow productivity.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Efficient Task Management and To-Do List Organization","text":"can install package directly GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"numbats/assignment-1-package-creation-agoh0008\")"},{"path":"/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Efficient Task Management and To-Do List Organization","text":"add_task: Add new item current -list specifying task description, priority due date. remove_task: Remove specific item current -list. update_task: Update task description, priority, due date existing item current -list. import_todo_list: Import current -list “data” directory package. -list empty tasks previously added. export_todo_list: Export updated -list back CSV file “data” directory package. create_todo_list(): Create S3 object class “TodoList” containing entries provided -list. show_items_by_date(): Filter items -list applicable classes based specified date filter criteria. show_items_by_priority(): Filter items -list applicable classes based specified priority filter criteria. show_today(): Display items due today earlier -list, along bar plot showing priority tasks. sort_items(): Sort items ascending descending order -list, based specified criteria date priority. print.TodoList: Print tasks provided TodoList object priorities due dates. plot.TodoList: Plot tasks provided TodoList object, visualizing priorities using bar plot.","code":""},{"path":"/index.html","id":"usage-examples","dir":"","previous_headings":"","what":"Usage Examples","title":"Efficient Task Management and To-Do List Organization","text":"examples use functions taskPlanner package: Import current -list Add new tasks current -list Update task description, priority, due date existing item current -list. Remove tasks current -list Export updated -list Create S3 object class “TodoList” Filter items -list date Filter items -list priority Show items due today earlier (real-time task tracking) Sort items -list date priority Print items -list class ‘TodoList’ Plot items -list class ‘TodoList’","code":"library(taskPlanner)  list <- import_todo_list() list <- add_task(list, \"Buy bread\", 3, \"2024-03-15\") list <- update_task(1, list, \"Buy milk\", 1, \"2024-03-18\") list <- remove_task(1, list) export_todo_list(list) my_todo_list <- create_todo_list(list) show_items_by_date(my_todo_list, date = \"2024-03-16\") show_items_by_priority(my_todo_list, priority = 2) show_today(my_todo_list) sort_items(my_todo_list, date = TRUE, ascending = TRUE) print(my_todo_list) plot(my_todo_list)"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Efficient Task Management and To-Do List Organization","text":"package licensed GPL License. See LICENSE file details.","code":""},{"path":"/reference/add_task.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Task Items to Current To-Do List — add_task","title":"Add Task Items to Current To-Do List — add_task","text":"function allows users add new item -list, specifying task description, priority, due date.","code":""},{"path":"/reference/add_task.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Task Items to Current To-Do List — add_task","text":"","code":"add_task(todo_list, task, priority, due, ...)"},{"path":"/reference/add_task.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Task Items to Current To-Do List — add_task","text":"todo_list data frame list representing current -list. task character string specifying task added. priority integer specifying priority task. Must within range 1-5. due Date object specifying due date task. ... additional arguments","code":""},{"path":"/reference/add_task.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Task Items to Current To-Do List — add_task","text":"updated -list data frame list new item added.","code":""},{"path":"/reference/add_task.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Task Items to Current To-Do List — add_task","text":"","code":"list <- import_todo_list()  list <- add_task(list, \"Buy bread\", 3, \"2024-03-15\") list <- add_task(list, \"Do laundry\", 2, \"2024-03-16\") list <- add_task(list, \"Buy dinner\", 1, \"2024-04-09\")"},{"path":"/reference/create_todo_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a To-Do List S3 Object — create_todo_list","title":"Create a To-Do List S3 Object — create_todo_list","text":"function creates S3 object class TodoList containing entries provided -list.","code":""},{"path":"/reference/create_todo_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a To-Do List S3 Object — create_todo_list","text":"","code":"create_todo_list(todo_list = NULL, ...)"},{"path":"/reference/create_todo_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a To-Do List S3 Object — create_todo_list","text":"todo_list data frame containing -list columns: task, priority, due. provided, function import current -list. ... additional arguments","code":""},{"path":"/reference/create_todo_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a To-Do List S3 Object — create_todo_list","text":"instance TodoList S3 class.","code":""},{"path":"/reference/create_todo_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a To-Do List S3 Object — create_todo_list","text":"","code":"# Example 1: Creating a TodoList object from an existing to-do list data frame: list <- import_todo_list() my_todo_list <- create_todo_list(list)  # Example 2: Creating a TodoList object from the current to-do list (imported from package data): my_todo_list <- create_todo_list()"},{"path":"/reference/export_todo_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Export To-Do List to CSV File — export_todo_list","title":"Export To-Do List to CSV File — export_todo_list","text":"function exports updated -list back CSV file \"inst\" directory.","code":""},{"path":"/reference/export_todo_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export To-Do List to CSV File — export_todo_list","text":"","code":"export_todo_list(todo_list, ...)"},{"path":"/reference/export_todo_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export To-Do List to CSV File — export_todo_list","text":"todo_list -list data frame list exported. ... additional arguments","code":""},{"path":"/reference/export_todo_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export To-Do List to CSV File — export_todo_list","text":"Nothing. -list exported CSV file.","code":""},{"path":"/reference/export_todo_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export To-Do List to CSV File — export_todo_list","text":"","code":"list <- import_todo_list()  export_todo_list(list)"},{"path":"/reference/import_todo_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Import To-Do List — import_todo_list","title":"Import To-Do List — import_todo_list","text":"function imports -list \"inst\" directory package. -list file exist, creates file initializes headers.","code":""},{"path":"/reference/import_todo_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import To-Do List — import_todo_list","text":"","code":"import_todo_list()"},{"path":"/reference/import_todo_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import To-Do List — import_todo_list","text":"-list data frame.","code":""},{"path":"/reference/import_todo_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import To-Do List — import_todo_list","text":"","code":"list <- import_todo_list()"},{"path":"/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Todo-List — plot","title":"Plot Todo-List — plot","text":"Plot Todo-List","code":""},{"path":"/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Todo-List — plot","text":"","code":"# S3 method for TodoList plot(x, ...)"},{"path":"/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Todo-List — plot","text":"x object class 'TodoList'. ... additional arguments","code":""},{"path":"/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Todo-List — plot","text":"Nothing.","code":""},{"path":"/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Todo-List — plot","text":"","code":"# Plotting TodoList objects:  list <- import_todo_list() my_todo_list <- create_todo_list(list) plot(my_todo_list)"},{"path":"/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Todo-List — print","title":"Print Todo-List — print","text":"Print Todo-List","code":""},{"path":"/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Todo-List — print","text":"","code":"# S3 method for TodoList print(x, ...)"},{"path":"/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Todo-List — print","text":"x object class 'TodoList' ... additional arguments","code":""},{"path":"/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Todo-List — print","text":"Nothing.","code":""},{"path":"/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Todo-List — print","text":"","code":"# Printing TodoList objects:  list <- import_todo_list() my_todo_list <- create_todo_list(list) print(my_todo_list) #> Task\t\tPriority\tDue Date #> ------------------------------------------------------------ #> Do assignments       \t       3 \t2024-03-15  #> Buy cake             \t       4 \t2024-03-16"},{"path":"/reference/remove_task.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Task Items from To-Do List — remove_task","title":"Remove Task Items from To-Do List — remove_task","text":"function allows users remove specific item -list.","code":""},{"path":"/reference/remove_task.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Task Items from To-Do List — remove_task","text":"","code":"remove_task(task_index, todo_list, ...)"},{"path":"/reference/remove_task.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Task Items from To-Do List — remove_task","text":"task_index integer specifying index task removed. todo_list data frame list representing current -list. ... additional arguments","code":""},{"path":"/reference/remove_task.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Task Items from To-Do List — remove_task","text":"updated -list data frame list specified item removed.","code":""},{"path":"/reference/remove_task.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Task Items from To-Do List — remove_task","text":"","code":"list <- import_todo_list() list <- add_task(list, \"Buy bread\", 3, \"2024-03-15\")  list <- remove_task(1, list)"},{"path":"/reference/show_items_by_date.TodoList.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for showing items due on the specified date for TodoList objects — show_items_by_date.TodoList","title":"Method for showing items due on the specified date for TodoList objects — show_items_by_date.TodoList","text":"Method showing items due specified date TodoList objects","code":""},{"path":"/reference/show_items_by_date.TodoList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for showing items due on the specified date for TodoList objects — show_items_by_date.TodoList","text":"","code":"# S3 method for TodoList show_items_by_date(x, date = NULL, ...)"},{"path":"/reference/show_items_by_date.TodoList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for showing items due on the specified date for TodoList objects — show_items_by_date.TodoList","text":"x object class 'TodoList'. date date filter , format \"YYYY-MM-DD\". ... additional arguments","code":""},{"path":"/reference/show_items_by_date.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for showing items due on the specified date for other classes — show_items_by_date.default","title":"Default method for showing items due on the specified date for other classes — show_items_by_date.default","text":"Default method showing items due specified date classes","code":""},{"path":"/reference/show_items_by_date.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for showing items due on the specified date for other classes — show_items_by_date.default","text":"","code":"# S3 method for default show_items_by_date(x, date = NULL, ...)"},{"path":"/reference/show_items_by_date.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for showing items due on the specified date for other classes — show_items_by_date.default","text":"x object applicable classes. date date filter , format \"YYYY-MM-DD\". ... additional arguments","code":""},{"path":"/reference/show_items_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Show Items Based on Date Filter Criteria — show_items_by_date","title":"Show Items Based on Date Filter Criteria — show_items_by_date","text":"generic function displays items -list applicable classes based specified date filter criteria.","code":""},{"path":"/reference/show_items_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show Items Based on Date Filter Criteria — show_items_by_date","text":"","code":"show_items_by_date(x, date = NULL, ...)"},{"path":"/reference/show_items_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show Items Based on Date Filter Criteria — show_items_by_date","text":"x object class 'TodoList' applicable classes. date date filter , format \"YYYY-MM-DD\". ... additional arguments","code":""},{"path":"/reference/show_items_by_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show Items Based on Date Filter Criteria — show_items_by_date","text":"Nothing. function displays items -list applicable classes based specified date filter criteria.","code":""},{"path":"/reference/show_items_by_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show Items Based on Date Filter Criteria — show_items_by_date","text":"","code":"# Showing items due on the specified date for TodoList objects:  list <- import_todo_list() my_todo_list <- create_todo_list(list) show_items_by_date(my_todo_list, date = \"2024-03-15\") #> Filtered items: #>             Task Priority   Due_Date #> 1 Do assignments        3 2024-03-15  # Showing items due on the specified date for other classes:  other_object <- list(task = paste(\"Task\", 1:15), priority = sample(1:5, 15, replace = TRUE), due = sample(seq(as.Date(\"2022-01-01\"), as.Date(\"2025-12-31\"), by = \"day\"), 15))  show_items_by_date(other_object, date = \"2022-01-01\") #> No items matching the filter criteria."},{"path":"/reference/show_items_by_priority.TodoList.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for showing items with the specified priority for TodoList objects — show_items_by_priority.TodoList","title":"Method for showing items with the specified priority for TodoList objects — show_items_by_priority.TodoList","text":"Method showing items specified priority TodoList objects","code":""},{"path":"/reference/show_items_by_priority.TodoList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for showing items with the specified priority for TodoList objects — show_items_by_priority.TodoList","text":"","code":"# S3 method for TodoList show_items_by_priority(x, priority, ...)"},{"path":"/reference/show_items_by_priority.TodoList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for showing items with the specified priority for TodoList objects — show_items_by_priority.TodoList","text":"x object class 'TodoList'. priority priority level filter , integer 1 5. ... additional arguments","code":""},{"path":"/reference/show_items_by_priority.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for showing items with the specified priority for other classes — show_items_by_priority.default","title":"Default method for showing items with the specified priority for other classes — show_items_by_priority.default","text":"Default method showing items specified priority classes","code":""},{"path":"/reference/show_items_by_priority.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for showing items with the specified priority for other classes — show_items_by_priority.default","text":"","code":"# S3 method for default show_items_by_priority(x, priority, ...)"},{"path":"/reference/show_items_by_priority.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for showing items with the specified priority for other classes — show_items_by_priority.default","text":"x object applicable classes. priority priority level filter , integer 1 5. ... additional arguments","code":""},{"path":"/reference/show_items_by_priority.html","id":null,"dir":"Reference","previous_headings":"","what":"Show Items Based on Priority Filter Criteria — show_items_by_priority","title":"Show Items Based on Priority Filter Criteria — show_items_by_priority","text":"generic function displays items -list applicable classes based specified priority filter criteria.","code":""},{"path":"/reference/show_items_by_priority.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show Items Based on Priority Filter Criteria — show_items_by_priority","text":"","code":"show_items_by_priority(x, priority, ...)"},{"path":"/reference/show_items_by_priority.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show Items Based on Priority Filter Criteria — show_items_by_priority","text":"x object class 'TodoList' applicable classes. priority priority level tasks filter , integer 1 5. ... additional arguments","code":""},{"path":"/reference/show_items_by_priority.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show Items Based on Priority Filter Criteria — show_items_by_priority","text":"Nothing. function displays items -list applicable classes based specified priority filter criteria.","code":""},{"path":"/reference/show_items_by_priority.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show Items Based on Priority Filter Criteria — show_items_by_priority","text":"","code":"# Showing items with the specified priority for TodoList objects: list <- import_todo_list() my_todo_list <- create_todo_list(list) show_items_by_priority(my_todo_list, priority = 3) #> Filtered items: #>             Task Priority   Due_Date #> 1 Do assignments        3 2024-03-15  # Showing items with the specified priority for other classes: other_object <- list(task = paste(\"Task\", 1:15), priority = sample(1:5, 15, replace = TRUE), due = sample(seq(as.Date(\"2022-01-01\"), as.Date(\"2025-12-31\"), by = \"day\"), 15))  show_items_by_priority(other_object, priority = 2) #> Filtered items: #>     Task Priority   Due_Date #> 1 Task 1        2 2024-09-12 #> 2 Task 5        2 2023-10-05 #> 3 Task 9        2 2024-01-13"},{"path":"/reference/show_today.TodoList.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for showing items due today or earlier for TodoList objects — show_today.TodoList","title":"Method for showing items due today or earlier for TodoList objects — show_today.TodoList","text":"Method showing items due today earlier TodoList objects","code":""},{"path":"/reference/show_today.TodoList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for showing items due today or earlier for TodoList objects — show_today.TodoList","text":"","code":"# S3 method for TodoList show_today(x, ...)"},{"path":"/reference/show_today.TodoList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for showing items due today or earlier for TodoList objects — show_today.TodoList","text":"x object class 'TodoList'. ... additional arguments","code":""},{"path":"/reference/show_today.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for showing items due today or earlier for other classes — show_today.default","title":"Default method for showing items due today or earlier for other classes — show_today.default","text":"Default method showing items due today earlier classes","code":""},{"path":"/reference/show_today.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for showing items due today or earlier for other classes — show_today.default","text":"","code":"# S3 method for default show_today(x, ...)"},{"path":"/reference/show_today.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for showing items due today or earlier for other classes — show_today.default","text":"x object applicable classes. ... additional arguments","code":""},{"path":"/reference/show_today.html","id":null,"dir":"Reference","previous_headings":"","what":"Show Items due Today or Earlier — show_today","title":"Show Items due Today or Earlier — show_today","text":"generic function shows items due today earlier -list. also generates bar plot showing priority tasks, higher priority tasks indicated taller bars.","code":""},{"path":"/reference/show_today.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show Items due Today or Earlier — show_today","text":"","code":"show_today(x, ...)"},{"path":"/reference/show_today.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show Items due Today or Earlier — show_today","text":"x object class 'TodoList' applicable classes representing -list. ... additional arguments","code":""},{"path":"/reference/show_today.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show Items due Today or Earlier — show_today","text":"Nothing. function displays items due today earlier -list, accompanied bar plot illustrating task priorities.","code":""},{"path":"/reference/show_today.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show Items due Today or Earlier — show_today","text":"","code":"# Showing items due today or earlier for TodoList objects:  list <- import_todo_list() my_todo_list <- create_todo_list(list) show_today(my_todo_list) #> Items due today or earlier: #>             Task Priority   Due_Date #> 1 Do assignments        3 2024-03-15 #> 2       Buy cake        4 2024-03-16   # Showing items due today or earlier for objects of other classes:  other_object <- list(task = paste(\"Task\", 1:15), priority = sample(1:5, 15, replace = TRUE), due = sample(seq(as.Date(\"2022-01-01\"), as.Date(\"2025-12-31\"), by = \"day\"), 15))  show_today(other_object) #> Items due today or earlier: #>       Task Priority   Due_Date #> 2   Task 2        4 2022-07-16 #> 9  Task 13        1 2022-08-25 #> 1   Task 1        2 2022-10-15 #> 6   Task 7        4 2023-04-01 #> 4   Task 5        5 2023-04-17 #> 10 Task 14        5 2023-06-21 #> 5   Task 6        3 2023-06-30 #> 3   Task 3        2 2024-04-02 #> 7   Task 8        1 2024-04-20 #> 8  Task 12        1 2024-05-26"},{"path":"/reference/sort_items.TodoList.html","id":null,"dir":"Reference","previous_headings":"","what":"Method for sorting items in a TodoList object — sort_items.TodoList","title":"Method for sorting items in a TodoList object — sort_items.TodoList","text":"Method sorting items TodoList object","code":""},{"path":"/reference/sort_items.TodoList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method for sorting items in a TodoList object — sort_items.TodoList","text":"","code":"# S3 method for TodoList sort_items(x, date = TRUE, ascending = TRUE, ...)"},{"path":"/reference/sort_items.TodoList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method for sorting items in a TodoList object — sort_items.TodoList","text":"x object class 'TodoList'. date Logical, indicating whether sort date. ascending Logical, indicating sorting order. ... additional arguments","code":""},{"path":"/reference/sort_items.TodoList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method for sorting items in a TodoList object — sort_items.TodoList","text":"sorted TodoList object.","code":""},{"path":"/reference/sort_items.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for sorting items in other applicable classes — sort_items.default","title":"Default method for sorting items in other applicable classes — sort_items.default","text":"Default method sorting items applicable classes","code":""},{"path":"/reference/sort_items.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for sorting items in other applicable classes — sort_items.default","text":"","code":"# S3 method for default sort_items(x, date = TRUE, ascending = TRUE, ...)"},{"path":"/reference/sort_items.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for sorting items in other applicable classes — sort_items.default","text":"x object applicable classes. date Logical, indicating whether sort date. ascending Logical, indicating sorting order. ... additional arguments","code":""},{"path":"/reference/sort_items.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default method for sorting items in other applicable classes — sort_items.default","text":"sorted object.","code":""},{"path":"/reference/sort_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort Items by Date or Priority — sort_items","title":"Sort Items by Date or Priority — sort_items","text":"function sorts items based specified criteria date priority.","code":""},{"path":"/reference/sort_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort Items by Date or Priority — sort_items","text":"","code":"sort_items(x, date = TRUE, ascending = TRUE, ...)"},{"path":"/reference/sort_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort Items by Date or Priority — sort_items","text":"x object class 'TodoList' applicable classes. date Logical, indicating whether sort date. TRUE, sorting date; FALSE, sorting priority. ascending Logical, indicating sorting order. TRUE, ascending order; FALSE, descending order. ... additional arguments","code":""},{"path":"/reference/sort_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort Items by Date or Priority — sort_items","text":"sorted object.","code":""},{"path":"/reference/sort_items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort Items by Date or Priority — sort_items","text":"","code":"# Sorting a TodoList by date in ascending order  list <- import_todo_list() my_todo_list <- create_todo_list(list)  sort_items(my_todo_list, date = TRUE, ascending = TRUE) #> Sorted To-Do List by date in ascending order: #>             Task Priority   Due_Date #> 1 Do assignments        3 2024-03-15 #> 2       Buy cake        4 2024-03-16  # Sorting a TodoList by priority in descending order list <- import_todo_list() my_todo_list <- create_todo_list(list) sort_items(my_todo_list, date = FALSE, ascending = FALSE) #> Sorted To-Do List by priority in descending order: #>             Task Priority   Due_Date #> 1       Buy cake        4 2024-03-16 #> 2 Do assignments        3 2024-03-15"},{"path":"/reference/update_task.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Task Item in To-Do List — update_task","title":"Update Task Item in To-Do List — update_task","text":"function allows users update task description, priority, due date existing item -list.","code":""},{"path":"/reference/update_task.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Task Item in To-Do List — update_task","text":"","code":"update_task(   task_index,   todo_list,   new_task = NULL,   new_priority = NULL,   new_due = NULL,   ... )"},{"path":"/reference/update_task.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Task Item in To-Do List — update_task","text":"task_index integer specifying index task updated. todo_list data frame list representing current -list. new_task character string specifying updated task description. new_priority integer specifying updated priority task. Must within range 1-5. new_due Date object specifying updated due date task. ... additional arguments","code":""},{"path":"/reference/update_task.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Task Item in To-Do List — update_task","text":"updated -list data frame list specified item updated.","code":""},{"path":"/reference/update_task.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Task Item in To-Do List — update_task","text":"","code":"list <- import_todo_list() list <- add_task(list, \"Buy bread\", 3, \"2024-03-15\")  list <- update_task(1, list, \"Buy milk\", 4, \"2024-03-18\")"}]
